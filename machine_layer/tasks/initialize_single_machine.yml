---
# 단일 머신 초기화 태스크
# 새로운 머신을 발견하고 설정합니다

# 1단계: 대상 머신 정보 표시
- name: "Display target machine info"
  ansible.builtin.debug:
    msg: |

      ========================================
      머신 {{ machine_index + 1 }}/{{ remaining_machines | length }} 설정
      ========================================
      이름: {{ target_machine.name }}
      IP: {{ target_machine.ip }}
      역할: {{ target_machine.role }}
      컨테이너: {{ target_machine.containers | join(', ') }}

# 2단계: 머신 켜기 안내 및 대기
- name: "Wait for user to power on machine"
  ansible.builtin.pause:
    prompt: |

      위 정보에 해당하는 머신을 켜고 네트워크에 연결한 후 Enter를 누르세요...

# 3단계: 이전 스캔 저장
- name: "Save previous scan"
  ansible.builtin.set_fact:
    previous_scan: "{{ current_scan | default(initial_scan) }}"

# 4단계: 새로운 머신 감지 루프
- name: "Detect new machine"
  block:
    - name: "Scan for new machines (attempt {{ attempt_num }})"
      ansible.builtin.shell: |
        nmap -sn {{ cluster_config.network_config.subnet }} | grep -E "Nmap scan report" | awk '{print $5}' | sort
      register: current_scan
      changed_when: false
      loop: "{{ range(1, scan_attempts + 1) | list }}"
      loop_control:
        loop_var: attempt_num
      until: new_hosts is defined and new_hosts | length > 0

    - name: "Find newly added hosts"
      ansible.builtin.set_fact:
        new_hosts: "{{ current_scan.stdout_lines | difference(previous_scan.stdout_lines) }}"

    - name: "Check if new host detected"
      ansible.builtin.assert:
        that: new_hosts | length > 0
        fail_msg: |
          새로운 호스트를 감지할 수 없습니다.
          머신이 켜져 있고 네트워크에 연결되어 있는지 확인하세요.
        success_msg: "{{ new_hosts | length }}개의 새로운 호스트를 감지했습니다"

  rescue:
    - name: "Retry detection"
      ansible.builtin.pause:
        prompt: |

          새로운 머신을 감지하지 못했습니다.
          다시 시도하려면 Enter를 누르세요 (머신이 완전히 부팅되었는지 확인하세요)...

    - name: "Perform another scan"
      ansible.builtin.shell: |
        nmap -sn {{ cluster_config.network_config.subnet }} | grep -E "Nmap scan report" | awk '{print $5}' | sort
      register: retry_scan
      changed_when: false

    - name: "Update previous scan for comparison"
      ansible.builtin.set_fact:
        previous_scan: "{{ current_scan }}"
        current_scan: "{{ retry_scan }}"

    - name: "Find newly added hosts (retry)"
      ansible.builtin.set_fact:
        new_hosts: "{{ current_scan.stdout_lines | difference(previous_scan.stdout_lines) }}"

    - name: "Check retry result"
      ansible.builtin.assert:
        that: new_hosts | length > 0
        fail_msg: "여전히 새로운 호스트를 감지할 수 없습니다. 수동으로 확인이 필요합니다."

# 5단계: 새 호스트가 1개인 경우
- name: "Handle single new host"
  when: new_hosts | length == 1
  block:
    - name: "Set target host IP"
      ansible.builtin.set_fact:
        target_host_ip: "{{ new_hosts[0] }}"

    - name: "Prompt for SSH credentials"
      ansible.builtin.pause:
        prompt: |

          감지된 호스트: {{ target_host_ip }}

          SSH 접속을 위한 정보를 입력하세요.
          사용자명 (기본값: root)
      register: ssh_user_input

    - name: "Set SSH username"
      ansible.builtin.set_fact:
        ssh_user: "{{ ssh_user_input.user_input if ssh_user_input.user_input != '' else 'root' }}"

    - name: "Prompt for SSH password"
      ansible.builtin.pause:
        prompt: "비밀번호"
        echo: no
      register: ssh_pass_input

    - name: "Gather machine information"
      ansible.builtin.raw: |
        cat /proc/cpuinfo | grep "model name" | head -1 | cut -d: -f2 | xargs || cat /proc/cpuinfo | grep "Processor" | head -1 | cut -d: -f2 | xargs
      delegate_to: "{{ target_host_ip }}"
      vars:
        ansible_user: "{{ ssh_user }}"
        ansible_password: "{{ ssh_pass_input.user_input }}"
        ansible_become_password: "{{ ssh_pass_input.user_input }}"
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
      register: cpu_info
      ignore_errors: yes

    - name: "Gather memory information"
      ansible.builtin.raw: |
        free -h | grep "^Mem:" | awk '{print $2}'
      delegate_to: "{{ target_host_ip }}"
      vars:
        ansible_user: "{{ ssh_user }}"
        ansible_password: "{{ ssh_pass_input.user_input }}"
        ansible_become_password: "{{ ssh_pass_input.user_input }}"
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
      register: mem_info
      ignore_errors: yes

    - name: "Confirm machine identity"
      ansible.builtin.pause:
        prompt: |

          ========================================
          감지된 머신 정보
          ========================================
          IP: {{ target_host_ip }}
          CPU: {{ cpu_info.stdout | default('알 수 없음') | trim }}
          메모리: {{ mem_info.stdout | default('알 수 없음') | trim }}

          이 머신을 '{{ target_machine.name }}'으로 설정하시겠습니까? (y/n)
      register: confirm

    - name: "Check confirmation"
      ansible.builtin.assert:
        that: confirm.user_input | lower == 'y'
        fail_msg: "사용자가 설정을 취소했습니다."

# 6단계: 새 호스트가 2개 이상인 경우
- name: "Handle multiple new hosts"
  when: new_hosts | length > 1
  block:
    - name: "Display detected hosts"
      ansible.builtin.debug:
        msg: |

          {{ new_hosts | length }}개의 새로운 호스트가 감지되었습니다:
          {% for host in new_hosts %}
          {{ loop.index }}. {{ host }}
          {% endfor %}

    - name: "Prompt for SSH credentials"
      ansible.builtin.pause:
        prompt: |

          SSH 접속을 위한 정보를 입력하세요.
          사용자명 (기본값: root)
      register: ssh_user_input

    - name: "Set SSH username"
      ansible.builtin.set_fact:
        ssh_user: "{{ ssh_user_input.user_input if ssh_user_input.user_input != '' else 'root' }}"

    - name: "Prompt for SSH password"
      ansible.builtin.pause:
        prompt: "비밀번호"
        echo: no
      register: ssh_pass_input

    - name: "Gather information for each host"
      ansible.builtin.include_tasks: gather_host_info.yml
      loop: "{{ new_hosts }}"
      loop_control:
        loop_var: host_ip
        index_var: host_index

    - name: "Display host information"
      ansible.builtin.debug:
        msg: |

          ========================================
          감지된 머신들 정보
          ========================================
          {% for info in host_info_list %}
          {{ loop.index }}. IP: {{ info.ip }}
             CPU: {{ info.cpu }}
             메모리: {{ info.memory }}
          {% endfor %}

    - name: "Select target host"
      ansible.builtin.pause:
        prompt: |

          어떤 머신을 '{{ target_machine.name }}'으로 설정하시겠습니까?
          번호를 입력하세요 (1-{{ new_hosts | length }})
      register: host_selection

    - name: "Validate selection"
      ansible.builtin.assert:
        that:
          - host_selection.user_input | int > 0
          - host_selection.user_input | int <= new_hosts | length
        fail_msg: "잘못된 번호입니다."

    - name: "Set target host IP"
      ansible.builtin.set_fact:
        target_host_ip: "{{ new_hosts[host_selection.user_input | int - 1] }}"

# 7단계: Python 설치 (Alpine Linux apk 사용)
- name: "Ensure Python is installed on target host"
  ansible.builtin.raw: |
    if ! command -v python3 > /dev/null 2>&1; then
      apk add --no-cache python3
    fi
  delegate_to: "{{ target_host_ip }}"
  vars:
    ansible_user: "{{ ssh_user }}"
    ansible_password: "{{ ssh_pass_input.user_input }}"
    ansible_become_password: "{{ ssh_pass_input.user_input }}"
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
  become: yes

# 8단계: 호스트명 변경
- name: "Set hostname on target host"
  ansible.builtin.hostname:
    name: "{{ target_machine.name }}"
  delegate_to: "{{ target_host_ip }}"
  vars:
    ansible_user: "{{ ssh_user }}"
    ansible_password: "{{ ssh_pass_input.user_input }}"
    ansible_become_password: "{{ ssh_pass_input.user_input }}"
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
  become: yes

# 9단계: 완료 메시지
- name: "Display machine completion message"
  ansible.builtin.debug:
    msg: |

      ========================================
      머신 설정 완료
      ========================================
      {{ target_machine.name }} ({{ target_host_ip }})가 성공적으로 설정되었습니다.
